//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientDuplex.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculatorService", CallbackContract=typeof(ClientDuplex.ServiceReference1.ICalculatorServiceCallback))]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/AddTo")]
        void AddTo(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/AddTo")]
        System.Threading.Tasks.Task AddToAsync(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/SubtractFrom")]
        void SubtractFrom(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/SubtractFrom")]
        System.Threading.Tasks.Task SubtractFromAsync(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/MultiplyBy")]
        void MultiplyBy(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/MultiplyBy")]
        System.Threading.Tasks.Task MultiplyByAsync(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/DivideBy")]
        void DivideBy(double num);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/DivideBy")]
        System.Threading.Tasks.Task DivideByAsync(double num);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculatorService/Equals")]
        void Equals(double result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : ClientDuplex.ServiceReference1.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.DuplexClientBase<ClientDuplex.ServiceReference1.ICalculatorService>, ClientDuplex.ServiceReference1.ICalculatorService {
        
        public CalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddTo(double num) {
            base.Channel.AddTo(num);
        }
        
        public System.Threading.Tasks.Task AddToAsync(double num) {
            return base.Channel.AddToAsync(num);
        }
        
        public void SubtractFrom(double num) {
            base.Channel.SubtractFrom(num);
        }
        
        public System.Threading.Tasks.Task SubtractFromAsync(double num) {
            return base.Channel.SubtractFromAsync(num);
        }
        
        public void MultiplyBy(double num) {
            base.Channel.MultiplyBy(num);
        }
        
        public System.Threading.Tasks.Task MultiplyByAsync(double num) {
            return base.Channel.MultiplyByAsync(num);
        }
        
        public void DivideBy(double num) {
            base.Channel.DivideBy(num);
        }
        
        public System.Threading.Tasks.Task DivideByAsync(double num) {
            return base.Channel.DivideByAsync(num);
        }
    }
}
